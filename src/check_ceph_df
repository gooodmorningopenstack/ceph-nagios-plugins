#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

import argparse
import os
import subprocess
import sys
from json import loads

__version__ = '1.6.0'

# default ceph values
CEPH_COMMAND = '/usr/bin/ceph'

# nagios exit code
STATUS_OK = 0
STATUS_WARNING = 1
STATUS_ERROR = 2
STATUS_UNKNOWN = 3


def main():

    # parse args
    parser = argparse.ArgumentParser(description="'ceph df' nagios plugin.")
    parser.add_argument('-e', '--exe', help='ceph executable [%s]' % CEPH_COMMAND)
    parser.add_argument('-c', '--conf', help='alternative ceph conf file')
    parser.add_argument('-m', '--monaddress', help='ceph monitor address[:port]')
    parser.add_argument('-i', '--id', help='ceph client id')
    parser.add_argument('-n', '--name', help='ceph client name')
    parser.add_argument('-k', '--keyring', help='ceph client keyring file')
    parser.add_argument('-p', '--pool', help='ceph pool name')
    parser.add_argument('-d', '--detail', help="show pool details on warn and critical", action='store_true')
    parser.add_argument('-W', '--warn', help="warn above this percent RAW USED", type=float)
    parser.add_argument('-C', '--critical', help="critical alert above this percent RAW USED", type=float)
    parser.add_argument('-V', '--version', help='show version and exit', action='store_true')
    args = parser.parse_args()

    # validate args
    ceph_exec = args.exe if args.exe else CEPH_COMMAND
    if not os.path.exists(ceph_exec):
        print("ERROR: ceph executable '%s' doesn't exist" % ceph_exec)
        return STATUS_UNKNOWN

    if args.version:
        print("version %s" % __version__)
        return STATUS_OK

    if args.conf and not os.path.exists(args.conf):
        print("ERROR: ceph conf file '%s' doesn't exist" % args.conf)
        return STATUS_UNKNOWN

    if args.keyring and not os.path.exists(args.keyring):
        print("ERROR: keyring file '%s' doesn't exist" % args.keyring)
        return STATUS_UNKNOWN

    if args.warn > args.critical or not args.warn or not args.critical:
        print("ERROR: warn and critical level must be set and critical must be greater than warn")
        return STATUS_UNKNOWN

    # build command
    ceph_df = [ceph_exec]
    if args.monaddress:
        ceph_df.append('-m')
        ceph_df.append(args.monaddress)
    if args.conf:
        ceph_df.append('-c')
        ceph_df.append(args.conf)
    if args.id:
        ceph_df.append('--id')
        ceph_df.append(args.id)
    if args.name:
        ceph_df.append('--name')
        ceph_df.append(args.name)
    if args.keyring:
        ceph_df.append('--keyring')
        ceph_df.append(args.keyring)
    ceph_df.append('df')
    ceph_df.append('detail')
    ceph_df.append('--format')
    ceph_df.append('json')

    # exec command
    p = subprocess.Popen(ceph_df, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, err = p.communicate()

    # parse output
    if output:
        ceph_df_detail = loads(output)

        if args.pool:
            for pool in ceph_df_detail['pools']:
                if args.pool == pool['name']:
                    pool_usage_percent = round(float(pool['stats']['percent_used']), 4)

                    if pool_usage_percent > args.critical:
                        print("CRITICAL: {} usage in {} pool is above {}".format(pool_usage_percent, args.pool, args.critical))
                        return STATUS_ERROR
                    elif pool_usage_percent > args.warn:
                        print("WARNING: {} usage in {} pool is above {}".format(pool_usage_percent, args.pool, args.warn, ))
                        return STATUS_WARNING
                    else:
                        print("{} pool usage of {} is ok".format(args.pool, pool_usage_percent))
                        return STATUS_OK
        else:
            total_used_raw_ratio, total_used_raw_bytes, total_used_bytes, total_bytes, total_avail_bytes = ceph_df_detail['stats'].values()
            raw_percentage_usage = round(float(total_used_raw_ratio) * 100, 2)
            raw_gigabytes_usage = int(total_used_raw_bytes) / (1 << 30)
            gigabytes_usage = int(total_used_bytes) / (1 << 30)

            if raw_percentage_usage > args.critical:
                print("CRITICAL: RAW usage of {} is above critical level {}".format(raw_percentage_usage, args.critical))
                return STATUS_ERROR
            elif raw_percentage_usage > args.warn:
                print("WARNING: RAW usage of {} is above warning level {}".format(raw_percentage_usage, args.warn))
                return STATUS_WARNING
            else:
                print("RAW usage of {} is ok".format(raw_percentage_usage))
                return STATUS_OK
    elif err:
        # read only first line of error
        one_line = err.split('\n')[0]
        if '-1 ' in one_line:
            idx = one_line.rfind('-1 ')
            print("ERROR: %s: %s" % (ceph_exec, one_line[idx+len('-1 '):]))
        else:
            print(one_line)

    return STATUS_UNKNOWN


if __name__ == "__main__":
    sys.exit(main())
